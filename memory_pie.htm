<!--
MIT License

Copyright (c) 2024 Donald Arthur Kronos, Ph.D. (DAK)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Benevolence Suggested:
While this license permits unrestricted legal use, the original author wishes to request and encourage that this software be used and evolved in ways that are meant to contribute positively to society and avoid causing harm.
-->
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: monospace;
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            text-align: center;
            background: #f5f5f5;
        }

        .recipe-button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            background: #b8ff00;
            color: black;
            font-size: 16px;
        }

        .recipe-button.active {
            background: #ff0080;
        }

        .digits {
            font-size: 24px;
            margin: 20px 0;
            line-height: 1.5;
            text-align: left;
            word-wrap: break-word;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* Hide the portrait grid by default (landscape mode) */
        .digit-grid {
            display: none;
        }

        /* Show the landscape row by default */
        .digit-row-landscape {
            display: flex;
            justify-content: center;
            gap: 1px;
            margin: 1px 0;
        }

        .digit-row {
            display: flex;
            justify-content: center;
            gap: 1px;
            margin: 1px 0;
        }

        .digit-button {
            padding: 8px 0;
            width: 36px;
            margin: 0 1px;
            border: none;
            cursor: pointer;
            background: #003048;
            color: white;
            font-size: 16px;
        }

        .digit-button.enter {
            background: #004868;
        }

        @media (orientation: portrait) {
            /* Previous digit button styles */
            .digit-row-landscape {
                display: none;
            }
            
            .digit-grid {
                display: block;
            }
            

            .digit-button {
                width: calc(14vw - 4px);  /* viewport width based, minus small gap */
                height: calc(14vw - 4px);
                font-size: calc(5vw);
            }

            /* Scale up UI elements */
            h1 {
                font-size: 31px;
            }

            h2 {
                font-size: 24px;
            }

            #recipeButtons {
                max-width: 100%;
                gap: 5px;
            }

            .recipe-button {
                padding: 10px 15px;
                font-size: 22px;
                margin: 0;
            }

            .stats {
                font-size: 28px;
            }

            .phase {
                font-size: 28px;
            }

            .congrats {
                font-size: 28px;
            }

            button.mode, button.afk {
                padding: 15px 31px;
                font-size: 25px;
            }
        }

        button {
            padding: 10px 20px;
            margin: 0 10px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 4px;
            background: #4CAF50;
            color: white;
        }
        button.mode {
            background: #9c27b0;
            margin-bottom: 20px;
        }
        button.afk {
            background: #2196f3;
        }
        button.afk.active {
            background: #f44336;
        }
        .stats {
            margin: 20px 0;
            font-size: 18px;
        }
        .phase {
            font-weight: bold;
            color: #2196f3;
            margin: 20px 0;
        }
        .congrats {
            color: #4CAF50;
            font-weight: bold;
            margin: 10px 0;
        }
        .centered-item-group {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            width: 100%;  /* Ensure it takes the full width for centering */
        }
        .centered-item {
            display: flex;
            align-items: center;
            margin-right: 10px;
            position: relative;  /* For tooltips */
        }
        .centered-item input[type="radio"] {
            cursor: pointer;
        }
        .centered-item input[type="checkbox"] {
            cursor: pointer;
        }
        .centered-item input[type="radio"]::after {
            content: "Click here to make this the default or fallback clumping size.";
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            white-space: nowrap;
            background-color: black;
            color: white;
            padding: 5px;
            border-radius: 3px;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }
        .centered-item input[type="radio"]:hover::after {
            opacity: 1;
            visibility: visible;
        }
        .centered-item input[type="checkbox"]::after {
            content: "Click here to toggle allowance of this clumping size.";
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            white-space: nowrap;
            background-color: black;
            color: white;
            padding: 5px;
            border-radius: 3px;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
        }
        .centered-item input[type="checkbox"]:hover::after {
            opacity: 1;
            visibility: visible;
        }
    </style>
</head>
<body>
    <h1>Memory Pie</h1>
    <button onclick="toggleMode()" class="mode">Next Recipe</button>
    <div id="recipeButtons" style="margin: 10px 0; display: flex; gap: 10px; justify-content: center;">
        <button tabindex="3" class="recipe-button"></button>
        <button tabindex="4" class="recipe-button"></button>
        <button tabindex="5" class="recipe-button"></button>
        <button tabindex="6" class="recipe-button"></button>
        <button tabindex="7" class="recipe-button"></button>
    </div>
    <h2 id="title">π×e Trainer</h2>
    <div class="controls">
        <button onclick="resetProgress()" tabindex="1">Start New Run</button>
        <button id="afkButton" onclick="toggleAFK()" class="afk" tabindex="2">Start AFK Mode</button>
    </div>
    <div class="stats">
        <div>Cycle: <span id="runCount">0</span>, Best: <span id="previousBest">0</span>,  Current: <span id="currentCount">0</span>, Goal: <span id="targetLength">3</span></div>
        <div>Audio Speed: <span id="speedLevel">1</span>, Chunk Size: <span id="chunkSize">4</span></div>
    </div>
    <div class="phase" id="phase">Ready to start</div>
    <div id="congrats" class="congrats"></div>
    <!-- Landscape layout (single row) -->
    <div id="digitButtonsLandscape" class="digit-row-landscape">
        <button class="digit-button enter">↵</button>
        <button class="digit-button">.</button>
        <button class="digit-button">0</button>
        <button class="digit-button">1</button>
        <button class="digit-button">2</button>
        <button class="digit-button">3</button>
        <button class="digit-button">4</button>
        <button class="digit-button">5</button>
        <button class="digit-button">6</button>
        <button class="digit-button">7</button>
        <button class="digit-button">8</button>
        <button class="digit-button">9</button>
        <button class="digit-button">0</button>
        <button class="digit-button">.</button>
        <button class="digit-button enter">↵</button>
    </div>

    <!-- Portrait layout (grid) -->
    <div id="digitButtonsPortrait" class="digit-grid">
        <div class="digit-row">
            <button class="digit-button enter">↵</button>
            <button class="digit-button">.</button>
            <button class="digit-button">0</button>
            <button class="digit-button">1</button>
            <button class="digit-button">2</button>
            <button class="digit-button">3</button>
            <button class="digit-button enter">↵</button>
        </div>
        <div class="digit-row">
            <button class="digit-button enter">↵</button>
            <button class="digit-button">3</button>
            <button class="digit-button">4</button>
            <button class="digit-button">5</button>
            <button class="digit-button">6</button>
            <button class="digit-button">7</button>
            <button class="digit-button enter">↵</button>
        </div>
        <div class="digit-row">
            <button class="digit-button enter">↵</button>
            <button class="digit-button">7</button>
            <button class="digit-button">8</button>
            <button class="digit-button">9</button>
            <button class="digit-button">0</button>
            <button class="digit-button">.</button>
            <button class="digit-button enter">↵</button>
        </div>
    </div>
    <div class="digits" id="display" tabindex="0"></div>

    <div class="centered-item-group">
        <div class="centered-item">
            <input type="radio" id="item2-radio" name="item-radio" value="Item3-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item2" name="items" value="Item2" data-tooltip="checkboxClump">
            <label for="item2">2 &nbsp; </label>
            <input type="radio" id="item3-radio" name="item-radio" value="Item3-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item3" name="items" value="Item3" checked data-tooltip="checkboxClump">
            <label for="item3">3 &nbsp; </label>
            <input type="radio" id="item4-radio" name="item-radio" value="Item4-radio" checked data-tooltip="radioClump">
            <input type="checkbox" id="item4" name="items" value="Item4" checked data-tooltip="checkboxClump">
            <label for="item4">4 &nbsp; </label>
            <input type="radio" id="item5-radio" name="item-radio" value="Item5-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item5" name="items" value="Item5" checked data-tooltip="checkboxClump">
            <label for="item5">5 &nbsp; </label>
            <input type="radio" id="item6-radio" name="item-radio" value="Item6-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item6" name="items" value="Item6" checked data-tooltip="checkboxClump">
            <label for="item6">6 &nbsp; </label>
            <input type="radio" id="item7-radio" name="item-radio" value="Item7-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item7" name="items" value="Item7" checked data-tooltip="checkboxClump">
            <label for="item7">7 &nbsp; </label>
            <input type="radio" id="item8-radio" name="item-radio" value="Item8-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item8" name="items" value="Item8" data-tooltip="checkboxClump">
            <label for="item8">8 &nbsp; </label>
            <input type="radio" id="item9-radio" name="item-radio" value="Item9-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item9" name="items" value="Item9" data-tooltip="checkboxClump">
            <label for="item9">9 &nbsp; </label>
            <input type="radio" id="item10-radio" name="item-radio" value="Item10-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item10" name="items" value="Item10" data-tooltip="checkboxClump">
            <label for="item10">10 &nbsp; </label>
            <input type="radio" id="item11-radio" name="item-radio" value="Item11-radio" data-tooltip="radioClump">
            <input type="checkbox" id="item11" name="items" value="Item11" data-tooltip="checkboxClump">
            <label for="item11">11 &nbsp; </label>
        </div>
    </div>

    <script>

        const SEQUENCES = {
            'pie': "8.53973422267356706546355086954657449503488853576511496187960113017922861115733080757256386971047394391377494251167746764632118759069602399061836345379070414542021599488963342852746700046687766093072711290393507480401055727040348627303998656540644166179229285713708216374412976168471172544672318420340751657873020506707999472076298967964373713900900839870785220633048298035384640173153001978236276770258035741255972055172639898617344959092612412289680764582785420543163215795419510261753326139327091269239274357568312735470622184259342983913191813594440620442770198489377232444615908940370060151390186645874739849823655400651269457195509817518967609862391220148508155545607981568675308586739080896645836366491171197692951525938412546338435876040814802615808583287673599471606966708191549941538446985380682339134628186666645715222960481458039095498952067967593111092538597541522316434620440904327905669010198992873083145479079327160729091948477188491992878937162484609450111652203196731971058211832709336231538251949398510926142750438850908482455431257277861356265114867397731658232289198374727773111695158465972587810000329741873624229923620712202587599094699590040464624319591158102542086129537177924294339770576617165650922379113217960851065792956862982185232418919771948419951864698015292439230706583349211674611155609277272183291558654704961469794355906270234465129223132883716678810091064920511620557569628569622711445864545823007560422382107955234019816469501880652419579034206487408747628701106957435990553220320125711611422213721382074566116348452622815821743290221020783462683275622959445086528114489829543104972972636954839998437938010998380887782568954452643089798722258988037308148878697934681308369634030997216325616455981696424010586563370264659416464674890754789241939704197023753795880835162073945866768085959715258770421371424362115726396848303069220992460868861676752522536132527965660644711620682133720639305960647942025410523614955738115874913244073184136047827210251100940743733846969289316097860986094131251574221313622013609671740313366101381156578501081505790419092339622224977058179015790399847063211602780926099992283449501935441656700040013304770434806573203700090339617696159375821373744110184280276630776265961453947657437648952770691278186935406964493199420071486868971086951759770858158728997291836557159195703159136734315229982496670232034434271701937078973006740833192842496642427682517667998596914339827031310642438600228760100713771932324937334101566918152566896001413131114680840259752254571309295090059533241376638942601730552208531802378024540959432387020558938310731919119831361406225339555214209222377820005179934126102735862473423531463827528807191597321448268040127964998088196712743211490447432404848169698494492100639940941644451748978787394365438687845289843705192273767193589596526446243333940691384417443979679906014511318552942676239638603140284993762192527297469525310466803077581465457178085336696162877461129386656368411331348686059231087479227006093633660953797992091389390953393373231704676012433589434196242757272172899028758725407221677811555390659001041615904173446479688186546062838126909649853550571006119943916447427960869777841565993969169550873103426615352746514154796900298112671424327757003548958033204208897235391303848718921219959107219469613080149354882564619145721262254479480835146256161864493314324716198110331649728988199884167875073030390028810416859654933288253551249245934171642412568599064922857182239580915892168147510494683471467946636903197714932651570436734983947606970361738120522339530881436739439086618751702678306461358983208685618623852330896964577435866836749703785816508826264041393467307258168729485587162445472761060446663269177810932795758092347208351912807942067459122383231992046817854508914058946318292126193183405663201350860941369468741739782998850344972863270816964499380819757222793194339752412077381952213599846553517558114105740138150971960820036565527814684615076547375289140732922939879253007224474332793879573804620717808878693367983590899523984542167078856625256074856121591190472996131141731287928417404809964715904562932793149342637601143769987258048",
            'pi': "3.",
            'e': "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981395599006737648292244375287184624578036192981971399147564488262603903381441823262515097482798777996437308997038886778227138360577297882412561190717663946507063304527954661855096666185664709711344474016070462621568071748187784437143698821855967095910259686200235371858874856965220005031173439207321139080329363447972735595527734907178379342163701205005451326383544000186323991490705479778056697853358048966906295119432473099587655236812859041383241160722602998330535370876138939639177957454016137223618789365260538155841587186925538606164779834025435128439612946035291332594279490433729908573158029095863138268329147711639633709240031689458636060645845925126994655724839186564209752685082307544254599376917041977780085362730941710163434907696423722294352366125572508814779223151974778060569672538017180776360346245927877846585065605078084421152969752189087401966090665180351650179250461950136658543663271254963990854914420001457476081930221206602433009641270489439039717719518069908699860663658323227870937650226014929101151717763594460202324930028040186772391028809786660565118326004368850881715723866984224220102495055188169480322100251542649463981287367765892768816359831247788652014117411091360116499507662907794364600585194199856016264790761532103872755712699251827568798930276176114616254935649590379804583818232336861201624373656984670378585330527583333793990752166069238053369887956513728559388349989470741618155012539706464817194670834819721448889879067650379590366967249499254527903372963616265897603949857674139735944102374432970935547798262961459144293645142861715858733974679189757121195618738578364475844842355558105002561149239151889309946342841393608038309166281881150371528496705974162562823609216807515017772538740256425347087908913729172282861151591568372524163077225440633787593105982676094420326192428531701878177296023541306067213604600038966109364709514141718577701418060644363681546444005331608778314317444081194942297559931401188868331483280270655383300469329011574414756313999722170380461709289457909627166226074071874997535921275608441473782330327033016823719364800217328573493594756433412994302485023573221459784328264142168487872",
            'phi': "1.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748475408807538689175212663386222353693179318006076672635443338908659593958290563832266131992829026788067520876689250171169620703222104321626954862629631361443814975870122034080588795445474924618569536486444924104432077134494704956584678850987433944221254487706647809158846074998871240076521705751797883416625624940758906970400028121042762177111777805315317141011704666599146697987317613560067087480710131795236894275219484353056783002287856997829778347845878228911097625003026961561700250464338243776486102838312683303724292675263116533924731671112115881863851331620384005222165791286675294654906811317159934323597349498509040947621322298101726107059611645629909816290555208524790352406020172799747175342777592778625619432082750513121815628551222480939471234145170223735805772786160086883829523045926478780178899219902707769038953219681986151437803149974110692608867429622675756052317277752035361393621076738937645560606059216589466759551900400555908950229530942312482355212212415444006470340565734797663972394949946584578873039623090375033993856210242369025138680414577995698122445747178034173126453220416397232134044449487302315417676893752103068737880344170093954409627955898678723209512426893557309704509595684401755519881921802064052905518934947592600734852282101088194644544222318891319294689622002301443770269923007803085261180754519288770502109684249362713592518760777884665836150238913493333122310533923213624319263728910670503399282265263556209029798642472759772565508615487543574826471814145127000602389016207773224499435308899909501680328112194320481964387675863314798571911397815397807476150772211750826945863932045652098969855567814106968372884058746103378105444390943683583581381131168993855576975484149144534150912954070050194775486163075422641729394680367319805861833918328599130396072014455950449779212076124785645916160837059498786006970189409886400764436170933417270919143365013715766011480381430626238051432117348151005590134561011800790506381421527093085880928757034505078081454588199063361298279814117453392731208092897279222132980642946878242748740174505540677875708323731097591511776297844328474790817651809778726841611763250386121129143683437670235037111633072586988325871033632223810980901211019899176841491751233134015273384383723450093478604979294599158220125810459823092552872124137043614910205471855496118087642657651106054588147560443178479858453973128630162544876114852021706440411166076695059775783257039511087823082710647893902111569103927683845386333321565829659773103436032322545743637204124406408882673758433953679593123221343732099574988946995656473600729599983912881031974263125179714143201231127955189477817269141589117799195648125580018455065632952859859100090862180297756378925999164994642819302229355234667475932695165421402109136301819472270789012208728736170734864999815625547281137347987165695274890081443840532748378137824669174442296349147081570073525457070897726754693438226195468615331209533579238014609273510210119190218360675097308957528957746814229543394385493155339630380729169175846101460995055064803679304147236572039860073550760902317312501613204843583648177048481810991602442523271672190189334596378608787528701739359303013359011237102391712659047026349402830766876743638651327106280323174069317334482343564531850581353108549733350759966778712449058363675413289086240632456395357212524261170278028656043234942837301725574405837278267996031739364013287627701243679831144643694767053127249241047167001382478312865650649343418039004101780533950587724586655755229391582397084177298337282311525692609299594224000056062667867435792397245408481765197343626526894488855272027477874733598353672776140759171205132693448375299164998093602461784426757277679001919190703805220461232482391326104327191684512306023627893545432461769975753689041763650254785138246314658336383376023577899267298863216185839590363998183845827644912459809370430555596137973432613483049494968681089535696348281781288625364608420339465381944194571426668237183949183237090857485026656803989744066210536030640026081711266599541993687316",
            'gamma': "0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498070824809605040144865428362241739976449235362535003337429373377376739427925952582470949160087352039481656708532331517766115286211995015079847937450857057400299213547861466940296043254215190587755352673313992540129674205137541395491116851028079842348775872050384310939973613725530608893312676001724795378367592713515772261027349291394079843010341777177808815495706610750101619166334015227893586796549725203621287922655595366962817638879272680132431010476505963703947394957638906572967929601009015125195950922243501409349871228247949747195646976318506676129063811051824197444867836380861749455169892792301877391072945781554316005002182844096053772434203285478367015177394398700302370339518328690001558193988042707411542227819716523011073565833967348717650491941812300040654693142999297779569303100503086303418569803231083691640025892970890985486825777364288253954925873629596133298574739302373438847070370284412920166417850248733379080562754998434590761643167103146710722370021810745044418664759134803669025532458625442225345181387912434573501361297782278288148945909863846006293169471887149587525492366493520473243641097268276160877595088095126208404544477992299157248292516251278427659657083214610298214617951957959095922704208989627971255363217948873764210660607065982561990102880756125199137511678217643619057058440783573501580056077457934213144988500786415171615194565706170432450750081687052307890937046143066848179164968425491504967243121837838753564894950868454102340601622508515583867234944187880440940770106883795111307872023426395226920971608856908382511378712836820491178925944784861991185293910293099059255266917274468920443869711147174571574573203935209122316085086827558890109451681181016874975470969366671210206304827165895049327314860874940207006742590918248759621373842311442653135029230317517225722162832488381124589574386239870375766285513033143929995401853134141586212788648076110030152119657800681177737635016818389733896639868957932991456388644310370608078174489957958324579418962026049841043922507860460362527726022919682995860988339013787171422691788381952984456079160519727973604759102510995779133515791772251502549293246325028747677948421584050759929040185576459901862692677643726605711768133655908815548107470000623363725288949554636971433012007913085552639595497823023144039149740494746825947320846185246058776694882879530104063491722921858008706770690427926743284446968514971825678095841654491851457533196406331199373821573450874988325560888873528019019155089688554682592454445277281730573010806061770113637731824629246600812771621018677446849595142817901451119489342288344825307531187018609761224623176749775564124619838564014841235871772495542248201615176579940806296834242890572594739269638633838743805471319676429268372490760875073785283702304686503490512034227217436689792848629729088926789777032624623912261888765300577862743606094443603928097708133836934235508583941126709218734414512187803276150509478055466300586845563152454605315113252818891079231491311032344302450933450003076558648742229717700331784539150566940159988492916091140029486902088485381697009551566347055445221764035862939828658131238701325358800625686626926997767737730683226900916085104515002261071802554659284938949277595897540761559933782648241979506418681437881718508854080367996314239540091964388750078900000627997942809886372992591977765040409922037940427616817837156686530669398309165243227059553041766736640116792959012930537449718308004275848635083808042466735093559832324116969214860649892763624432958854873789701489713343538448002890466650902845376896223983048814062730540879591189670574938544324786914808533770264067758081275458731117636478787430739206642011251352727499617545053085582356683068322917676677041035231535032510124656386156706449847132695969330167866138333333441657900605867497103646895174569597181553764078377650184278345991842015995431449047725552306147670165993416390660912054005322158902091340802782251533852899511665452245869185993671220132150144801424230986254604488672569343148870491593044640189164502022405495",
            'sqrtpi': "1.772453850905516027298167483341145182797549456122387128213807789852911284591032181374950656738544665416226823624282570666236152865724422602525093709602787068462037698653105122849925173028950826228932095379267962800174639015351479720516700190185234018585446974494912640313921775525906216405419332500906398407613733477475153433667989789365851836408795451165161738760059067393431791332809854846248184902054654852195613251561647467515042738761056107996127107210060372044483672365296613708094323498831668424213845709609120420427785778068694766570005218305685125413396636944654181510716693883321942929357062268865224420542149948049920756486398874838505930640218214029285811233064978945203621149078962287389403245978198513134871266512506293260044656382109675026812496930595420461560761952217391525070207792758099054332900662223067614469661248188743069978835205061464443854185307973574257179185635959749959952263849242203889103966406447293972841345043002140564233433039261756134176336320017037654163476320669276541812835762490326904508485320134192435989730871193799482938730111262561658818884785977875963761363218634246546641333954355703201522654193952186030497310513829498439659165614245955421226615102478536098095510395600789402188099613382854025016800745802729119366425192820510001936350073914643295493433951928853735459200563766502880540575532123189009126322819150914980836695624483100852221923973646324842863261145766932425371577377894414090544573595351225626391080239236909732127905807617134603914574791879794124850218445145811341888880413220955332184646709727491028565262707845453262227848800982385836300754950954764062377083388357225436621567481327668384244972420874516161833205077991480184666814236693651902845463857614827857037774388376297479982737705431583682410998683228503805526355369722293133805264428410372312043967004307612454138311792278275363715598398376884537027842985707090511223840536779013385414585316208073043138069739987436693166013817079272056041954882858063093111636297047867814026963272962701226135985897754505289483113016684001532074851982402463337555851713568019341228975980719568740250571502141783792543643030365928211250925880618903117074543127903953553660682611001188965742048727593919976995538352115086696255596441370503829244953590310636234530564717116216858725458687440029611757921723190554057198681727588419089649657906696515601728351482903856551169807210795330916130843598524389465440682165500327537996023866503798886481521186579995857186563775113315974753596043413776645119143460134292508116324806409073773212629335747472967679341271602966512080989809057799660305102181625557978907487076211076238026267854297015027109153504985351492390832484280828987595575678848892608420885521269510357370208661259115541320440373560864338837123962064293902378666311632616788841922798194995240394245784220443030420430420710969273392946085104969289739161855607837870336428902342932718872968029721581659426129728366395905041130374745743509749058016326916537576909810974856253778503428799421922377185844318327937312980065870368619230102174545052030845533038619506602364334115320597412242642653542165581500364726919463825441245572594739007192271870979605498972460282260242910507740208123756748076276377437063450463147737694803316835707620587495781733509967628733873967029688190661426144573713228228039354446083776010586467389438557768872039717670592731663009031126081448843086241142922479654540261637551586587351984372175505527295064150435768758381493594010556591215037704419738803705680971434631636054341365076699975762119811842587422520814043640621172309197439455245967781742191464333506714636462259479231949700349660256352103378066038052703165245454647364062083029827349433672847735302022470529009956981567058640398856368349564952882878519644755574256014599268525818563085380581552199702923480294821795700392954768767378746756147454505258517116754152028266227999770386933422500122977316212394924627075833168064640739293784578214185498332786764818792567950132845112600154788298303970941227955902739831214814542270184266024781981043333772958400258388865676834533309029610949987493741347827363468214661024873730434936857350647979436639913666636603",
            'sqrt2': "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372352885092648612494977154218334204285686060146824720771435854874155657069677653720226485447015858801620758474922657226002085584466521458398893944370926591800311388246468157082630100594858704003186480342194897278290641045072636881313739855256117322040245091227700226941127573627280495738108967504018369868368450725799364729060762996941380475654823728997180326802474420629269124859052181004459842150591120249441341728531478105803603371077309182869314710171111683916581726889419758716582152128229518488472089694633862891562882765952635140542267653239694617511291602408715510135150455381287560052631468017127402653969470240300517495318862925631385188163478001569369176881852378684052287837629389214300655869568685964595155501644724509836896036887323114389415576651040883914292338113206052433629485317049915771756228549741438999188021762430965206564211827316726257539594717255934637238632261482742622208671155839599926521176252698917540988159348640083457085181472231814204070426509056532333398436457865796796519267292399875366617215982578860263363617827495994219403777753681426217738799194551397231274066898329989895386728822856378697749662519966583525776198939322845344735694794962952168891485492538904755828834526096524096542889394538646625744927556381964410316979833061852019379384940057156333720548068540575867999670121372239475821426306585132217408832382947287617393647467837431960001592188807347857617252211867490424977366929207311096369721608933708661156734585334833295254675851644710757848602463600834449114818587655554286455123314219926311332517970608436559704352856410087918500760361009159465670676883605571740076756905096136719401324935605240185999105062108163597726431380605467010293569971042425105781749531057255934984451126922780344913506637568747760283162829605532422426957534529028838768446429173282770888318087025339852338122749990812371892540726475367850304821591801886167108972869229201197599880703818543332536460211082299279293072871780799888099176741774108983060800326311816427988231171543638696617029999341616148786860180455055539869131151860103863753250045581860448040750241195184305674533683613674597374423988553285179308960373898915173195874134428817842125021916951875593444387396189314549999906107587049090260883517636224749757858858368037457931157339802099986622186949922595913276423619410592100328026149874566599688874067956167391859572888642473463585886864496822386006983352642799056283165613913942557649062065186021647263033362975075697870606606856498160092718709292153132368281356988937097416504474590960537472796524477094099241238710614470543986743647338477454819100872886222149589529591187892149179833981083788278153065562315810360648675873036014502273208829351341387227684176678436905294286984908384557445794095986260742499549168028530773989382960362133539875320509199893607513906444495768456993471276364507163279154701597733548638939423257277540038260274785674172580951416307159597849818009443560379390985590168272154034581581521004936662953448827107292396602321638238266612626830502572781169451035379371568823365932297823192986064679789864092085609558142614363631004615594332550474493975933999125419532300932175304476533964706627611661753518754646209676345587386164880198848497479264045065444896910040794211816925796857563784881498986416854994916357614484047021033989215342377037233353115645944389703653166721949049351882905806307401346862641672470110653463493916407146285567980177933814424045269137066609777638784866238003392324370474115331872531906019165996455381157888413808433232105337674618121780142960928324113627525408873729051294073394794330619439569367020794295158782283493219316664111301549594698378977674344435393",
            'cbrt2': "1.2599210498948731647672106072782283505702514647015079800819751121552996765139594837293965624362550941543102560356156652593990240406137372284591103042693552469606426166250009774745265654803068671854055186892458725167641993737096950983827831613991551293136953661839474634485765703031190958959847411059811629070535908164780114735213254847712978802422085820532579725266622026690056656081994715628176405060664826773572670419486207621442965694205079319172441480920448232840127470321964282081201905714188996459998317503801888689594202055922021154729973848802607363697417887792157984675099539630078260959624203483238660139857363433909737126527995991969968377913168168154428850279651529278107679714002040605674803938561251718357006907984996341976291474044834540269715476228513178020643878047649322579052898467085805286258130005429388560720609747223040631357234936458406575916916916727060124402896700001069081035313852902700415084232336239889386496782194149838027072957176812879001445746227147702348357151905506722084818485009287239209282646606717174247753709737030012742918094054425696592075036357570375189603707473993461014490145157635960471111973845299132965726258904860978856180138677383615773009865983660805975756012787121486856242684556411651558179353228015896291299445004012084254141601575258416298814230973582153060405772425383645325335659551172522855795622772403665628468759015430667535190854845118181752042912412337809631725213575411418114661273660457830360574402651309607096816400688818565723100900842845260864140595033690030791869935569133518342856938262554313558973544502333028531493224551341219554578211965008339577142668506332841961968651210925578955885089968619015467004389687866554530985450576376503600894330651035693577753724954843682137031716216218349580935620872600962678518341834565223974454000447602177889420818380278666530653266326186411600740074747547355852770168950206375413223232969424370174234349161769060072385390222768112977741387207982343039103162854645208311112254682835318304706133509962996445533176594892140511655701885058163377590259584598049542071162429490576805263439895630988409486763457284597918921017669484572485203669942687124101217752777129173164203840634909211658342720961771514093995247275502565412069568839797390390503283375386656354367809315086212227096396854740102722937553501106226207425048107640266578918892733990559108087812393964457811599167981885750617262691783203340901304190770727178294964571676007190205761952153152463863673213027383187903669558934250623625706579967117913543123735636030762433940938027808477164788989025290657428920778378231770868998907264609607150820659106986462371166018854708077164228284038386367665419587251062673265886635040876410319525385833853885760877283954893064374389798078358344491391903395471320680820789089909131084864106470477955708458988574848587272284371841200735447944731521287944073647503423467231749861256967123497954181692526525498381000981011778294993697050401103004806315713402625786014024766248360368191652629827685288013466937510911228515764875914753482517795806733863738829372918270740878258080531275399760057190853405085475806044214250997208002457396885383919946099671195502690165387968195603485138116556598204146209493463790579858456294410572579528120095491493350022958607475059227442420693600224526789537696336777576420743840960718400649235412598773170021287475791240357548857708109419314944268676717439487233248511095872910843847907798603919808443272568443177768557928311165779859916093169919662619865944385754924210135514376676013370968129266672422081213356211731481057220004193640248076837721407820186328246454164398395713266972580231148063010911093931406495070908905524088747299737598150870518233878180349197513536657687113295354768500645212289336840859093472665163929891513843472917269916799344584254162057132103966395449120612414451514574576162347478888166743276523271347651697724877390170213972551914620380258489116289669176868884009698080931118816143267002965414925822275810784847519151766681454837897668571505231660146881659012718803207153976130495524344131359735629054967066207866164935124752482384590083770413898191125988761812621373879454655021733729466784",
            'sqrt3': "1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248575675626141415406703029969945094998952478811655512094373648528093231902305582067974820101084674923265015312343266903322886650672254668921837971227047131660367861588019049986537379859389467650347506576050756618348129606100947602187190325083145829523959832997789824508288714463832917347224163984587855397667958063818353666110843173780894378316102088305524901670023520711144288695990956365797087168498072899493296484283020786408603988738697537582317317831395992983007838702877053913369563312103707264019249106768231199288375641141422016742752102372994270831059898459475987664288897796147837958390228854852903576033852808064381972344661059689722872865264153822664698420021195484155278441181286534507035191650016689294415480846071277143999762926834629577438361895110127148638746976545982451788550975379013880664961911962222957110555242923723192197738262561631468842032853716682938649611917049738836395495938145757671853373633125910899655424624834787197605235997769192323570220305302840385915414971072429559206706202509520175963185872766359975283663431080150665853710647328538625922260582220510403680270297504798728079461658100417052681940019095733462175943893670249320422691034369812463720111185261084268910299720311202100063507176374582405203847555197279933797614906107894985544223326004018851303631561144886847281589288163245187265066645384877599162576642872111240842068016763517100102943180715515190961642460907039408129216903517492961364004139670431041253632327030922577327960292376597745537095469115742140424230781992327617401906424512454877516862696105333694216213605394604245654140128533007813633449856736406703977342229811961042925534501601405940479547154534548407271737656262366549166640233006013265744070107836858468452313160467754480500402240639911970362218602920238867150711017169400296868759663500040895316214233425227956834067013470185902028360716762147743493449563595808082130442586469468522610908263353008756612603460672195404055984128912975994810000772057440230047673258800091514371489475444879157191294659083570873961515537797640262068370848046072969382719585689759759626104159152657577790782334980567840022901532052138935373775536566427046826874289963441395743666073744445583086477893212985302148197395341478170516614952551763291993699565744522639112519093541386989366817430938226424736926202072990967831154131946484377915459915923928287714695149274026409213645654041644581490201945749419305269002613972646081065071439603206077510594187798284793986195249964165213139715293599421897416647075187235788629466108560170428869605798394052906407430811833388677881562635867156008396760245349229943938867059754315442943430957258470988215463111260766774067864571578060647447499750354544559313286549189849336572747626297414738235686914837831363361283627903824840163806671607179848728555842931349226093240565957553651136754644387834283313466644554180390821898983294626345016171122016929619460169320621033039744866231656003566781813443100896568706742965658177445572685015631594412507361198063472886466241327193669426712951450397518928313486192841303255188431169014671423794374728334344652482043796059732870616274910941596862625302558889768470417502003140262284691048046984032437906606737749627102512710602060862662843666050192890893838320006091228691881836842361693903523126930368613796811526946997891926635284389927016519825502252923579366281634568108913074112678378199449772765448294920438801301783546499213574032791577507786002296423504275996997626918738414847394773851563552091220963315839034567189415294357040653076085290174249768185502885276344949577449110422502453723156063618103504871759158032791798367510067136100066217566049573766777112925287302479926720158996418937762016114118289899682955902511656391422364995062850030696812973507251727918598301115277542298851885311763594786003123063726098369850308310852145595748359555715739356633680864821078791247051031631569581604348748829614894154585355561974999296877955099285527423590251810323766861609592552544319954907420679739157072614245328950428097351037967736660135917522627061232312589450697634813",
            'epi': "23.1406926327792690057290863679485473802661062426002119934450464095243423506904527835169719970675492196759527048010877731444280444146938358447174458796098493653279658636692422302689910137417646844014103951838684772430680595881624498444914309667784136716319634147840382165112876377314703473538331628212940478919362248202210060320654433627365572718237449896188580595916848726454790133978340265951014996437924229681607995653814235362069576007705904608998830022543048712117913008493273795807294273019310426016919393258532034289686618952832905217111571851855068022541972045663708655683868305447992781704074977685403675565349572188678825639943847182245858894285352472605682102710760184915345184680648873867744396305140051694405406652654309688690639373153598373110421744330239678966900350411814860533902872037599185868868974873243217215855960743346764261678561173533364212656319156654548922896922457738895709053618038361975103265679436240883599064223471284653343731487170651789463742734126947968043210414766682302864293444678745830362189635239213293243755202331263478244147508006278312829271519365166830929625226829715521257410938286330034118971425070391618800155505038035538437188616032888861442508998810031974483391223037725293617273075741343627590442699540628922579087577052911014876302601020524780042062772351397195078304488762383981639411744468279747308024865885436962719627238805466185534197293736373684191486910270353281537243867487551172142583108474101692253984340389808534917403844507215114087612125811908321332649238355934917541679622823221912280111532781552042190180259088917653839536745028909022479704096924057850827510369135603544208717065086204071098076047649664498373161636034508279370165340440974416420237034108061228615353051387461832740115304528010717090104902166216353776464990332649322806627870287611322232688033427394797582978304281719406896832618691897922043723469526795425107815716933037512860984747114576499938529395531729931852240363585166643234602066917538936869124225070335206733586335473588758256850741538420330943088931313457057160330883815388005044529078637039815981719709217179025118876967240286328417036256724947916513202388951545960884080501862908385804810358430851895943585321681613963935178074540634463399687496501730577777442581165354642577307714200294541234047878473162484667451523610508829057036044982303767033402402265042353894659002230997833476496149103565822903565507317668539759119107462026889083887451356154032392880222217254559205126910439744730137913216438620470115114019522523314566160957301152751981057949213890575818996040695963120184003481811694939005006327629234752432779219383282163850212701642636815028969706923971186759142043460252095673705874849396864817368353098908861787570553500981902333825999804557278524343992712833056873647086397718936217601001241752977056641417921793648556773969085635894654173484907689699235686616405182248846030947905695910224958660120114456050138709304890923841144723660389575076366880162409278743823737448149166506149644178354996904405783592272449312365151857668060208695502537664466940822518351207778925990013272229571193618291435308464020914157263456922135175714018221462050281704560343714036872691585763405457398290983522830770292876670932250042639130900507396828477037798566254168427924325502034024134285412947899090008980986934618581866886070607620909535003394646065167345018114836282422525856328087316732562574345985327674862707958291934951905390360887594113693182234777731616845256804811570156580811936002735622491816579310765740497624713371491534882850553749844029718072653245986615278182412765249399914522937453466707437252313418764844563952256982157249416303621197671945601383264040674535436454501777292977403513868006945507776845713132829411454624566135577514039660047151915332367971068593676533130877051558249665891543356052754103653006114261293609044429544861821594431586395682866897520244092153128021085837283369534968820317147281354511946253912317302681142099678170739104958447779137060212931155304862813013822666252294581627184560284638658790044832022304068316819963160395364281567585204826901039827420294549800479030341461499217933833636782359812210608935347180839",
            'ln2': "0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481020570685733685520235758130557032670751635075961930727570828371435190307038623891673471123350115364497955239120475172681574932065155524734139525882950453007095326366642654104239157814952043740430385500801944170641671518644712839968171784546957026271631064546150257207402481637773389638550695260668341137273873722928956493547025762652098859693201965058554764703306793654432547632744951250406069438147104689946506220167720424524529612687946546193165174681392672504103802546259656869144192871608293803172714367782654877566485085674077648451464439940461422603193096735402574446070308096085047486638523138181676751438667476647890881437141985494231519973548803751658612753529166100071053558249879414729509293113897155998205654392871700072180857610252368892132449713893203784393530887748259701715591070882368362758984258918535302436342143670611892367891923723146723217205340164925687274778234453534764811494186423867767744060695626573796008670762571991847340226514628379048830620330611446300737194890027436439650025809365194430411911506080948793067865158870900605203468429736193841289652556539686022194122924207574321757489097706752687115817051137009158942665478595964890653058460258668382940022833005382074005677053046787001841624044188332327983863490015631218895606505531512721993983320307514084260914790012651682434438935724727882054862715527418772430024897945401961872339808608316648114909306675193393128904316413706813977764981769748689038877899912965036192707108892641052309247839173735012298424204995689359922066022046549415106139187885744245577510206837030866619480896412186807790208181588580001688115973056186676199187395200766719214592236720602539595436541655311295175989940056000366513567569051245926825743946483168332624901803824240824231452306140963805700702551387702681785163069025513703234053802145019015374029509942262995779647427138157363801729873940704242179972266962979939312706935747240493386530879758721699645129446491883771156701678598804981838896784134938314014073166472765327635919233511233389338709513209059272185471328975470797891384445466676192702885533423429899321803769154973340267546758873236778342916191810430116091695265547859732891763545556742863877463987101912431754255888301206779210280341206879759143081283307230300883494705792496591005860012341561757413272465943068435465211135021544341539955381856522750221424566440006276183303206472725721975152908278568421320795988638967277119552218819046603957009774706512619505278932296088931405625433442552392062030343941777357945592125901992559114844024239012554259003129537051922061506434583787873002035414421785758013236451660709914383145004985896688577222148652882169418127048860758972203216663128378329156763074987298574638928269373509840778049395004933998762647550703162216139034845299424917248373406136622638349368111684167056925214751383930638455371862687797328895558871634429756244755392366369488877823890174981027356552405051854773061944052423221255902483308277888889059629119729954574415624512485926831126074679728163809025000565599914612833254358111404848206064082422479240385576476235031100324259709142501114615584830670012583182191534720747411194009835573272826144273821397070477956259670579023033848061713455553685537581065749734447922511196546161827896010068512965395479658663783522473624546093585036050678414391144523145778033591792112795570505555451438788818815351948593446724642949864050626518424475395663783373482207533294481306493360354610101774649326787716719861207396832012359607729024683045940313056377631324010804202854359026945094030740014933950767316028502869730318718239984335257435499560850256608978339556421149480733936260751023818331411004708903950134330297413474840540615877539688838154076980177673036999107492469784784312843036411289202801227256346839162335478772734006395865717981906935812738703433531318905038384561644444292796906383796909244130396560098766358462776607605348697490859381193930925179119885552776535666076243935687719423316664283820074481630786522923565982658627591874752087509144760901697356935723182424991947549443163146339227",
            'sin1': "0.841470984807896506652502321630298999622563060798371065672751709991910404391239668948639743543052695854349037907920674293259118920991898881193410327729212409480791955826766606999907764011978408782732566347484802870298656157017962455394893572924670127086486281053382030561377218203868449667761674266239013382753397956764255565477963989764824328690275696429120630058303651523031278255289853264851398193452135970955962062172114814441781057601075674136648055008916726605804140078062393070371877956261288804636081734524656391420252404187763420749206952007713347809814279021452682556632082335215441609164420905892987022473384460448972371397991274081924725048855487311931035068190815153260745739291118331962821508973486881142145283822986512570166738407445519237561432212906059248273970368180158563090543266784643107531263812173256701985601106836028901895019421516166551917914517200466865959716910721978058854064600199401370140530958085520528052531711332305461638363601816994797150048515079398383039567816794816122140220891698710974393121190476626755660862943920712754026403595142681940742515405097606281738246115454618877240138930330976557107209233833000379622236868837011390028787809931893180425891866673507645748718328032132397560834052825458913396704650916929840894981876233125113331750607363469930284473581007929120020265941241512662095259587425117533708749259325431288480955686605107851758251186974372038582300745657893092617926259659895926317135353774917134456923962280471954122887217901254475420293631458462894257339643475927704675577133878705419172631157812221212263628563836937183438963701194854496382353699937278406169086554288247196791003275534086547730477984981606905048871929125405755086600116043085455475652131385216595746609364940939361158605368611562158791568322829266534978770819889777103965683551168454736884312106633481311519307962491913785074669524811584375231931470932070207611660535350649561943246838125028944898638080551253922228177596047774124645106497920434041781010295463802660488668016034296858404355924254730971698968121175487941079117789265154278099212292041176324565743832394099197783505361646163562341893510176841870106676159926443786131669703921721224846106073385577893501151546284405349917481226202555744722079863496910108503598442081323676176634732211131392826721634746213687957637679641518154601248455327285721981284548383082352949204777310319921700337625753552112766792561223391366681293180271683555227590729023266504742896709496072912831435860758941811738248191879423906721114941733551100275340613777071840507209287983248851808905225871844391473032678611673856761718353605486040313922541214247160553511326448435163433725224521731648360754158218160872429420887334457065266681286848094419978228090189362888242687073248808490778629801593835551674823529459998461354005314635285350938177051730555489913301208984611555234114650735523082222050542319345759232018623148086517006826847456257805658225201500535773494764356150063348831701253071510538170487328913854238696217256894541268147313078992272759083087225762644806952089989363340091028532263846957637218168158214278093536407078272031252960642721436761345269936451371742370647588368531916727430799722657658202806038133956170238799882317962758096322705958714877238332406719809823457065629020403430575457456081813691946339054974161950246612928587268419375660015873834266101509923584323838621759818808849633063919792647777622107346865953447898171642358992085626731104165433279454762208841198760992118632119659903019329746145141595203311479697163625372655786312486952807572147489345048666144576542054932489762914119582411684576154679229704829935767013162736987008164003962621199429336517302011351062741834206724249002960866640144697428119564274120469909599516418546318348377715965703372821289606254297716535594020518309129244077521447795691727251260606810333268415197573926416618940117186520594295191697664986290243550915991948376972686320417958990054018494052302284897468845344891427576985145508763303443320718415674018420731694776605274641638342924637250979371534930297735386608700821487271881747844893576011431737804293802294026317794504372911485499703264932251140792534270755935018",
            'cos1': "0.5403023058681397174009366074429766037323104206179222276700972553811003947744717645179518560871830893435717311600300890978606337600216634564065122654173185847179711644744794942331179245513932543359435177567028925963757361543275496417544917751151312227301006313570782322367714015174689959366787306742276202450776374406758749816178427202164558511156329688905710812427293316986852471456894904342375433094423024093596239583182454728173664078071243433621748100322027129757882291764468359872699426491344391826569453515750762782513804991607306380317214450349861294883363356557799097930152879278840389800974548251049924537987740061453776371387833594234524168164283618828482374896327390556260912017589827502528599917438580692485584232217826858271088291564683006796875955130036108120336747472749181033673515093458888304203217596594052703934762502487370752661313369842416059710595606599978691384415574414466420012839398870926323453338868626299654709768054836830358211823411732418465771864116514294188326444690783859132110896575103960705960759221332366017786351492108205031065654198794845342017738385811357962354018296001175873376777852901258204259025237801504060850882908795025225744358569522018258768695317863095186263553823892782567518042536874340334484199139641778109368480626361114606753938337594269939033747098325755240476386598977329707201667247126563752900306614605034281563800013282179562451658510170996813309651893664177301806828049421820641100444091566454469055725174820481156994870221599884671417958562941577542388092255751817018402663922330264744915311249040626763443721829862038955693079887700215358516762915693662888093919609600859581638921425897858816243951817851611667933712763680952332214049464665936950210847510020316452379289892665115747800659173062123849623725802989257237931441835058753878309972646823726580622798038628635208077956499890432246165047690917246182413083324891792728497713533003385774380265119951502197736917437683461375008667832145218733803677835349407026635061759307974507672539979761843049908552558874235559639398356369600887013892504200482717508196199314484076091604599557361497158468685092036403668611591081932468700588426400680678544483192646041937141026365902641117429146053931658289491358831490560327765635632278617967549188239925783966919252217631746594197159140881211600832933631510838475192970551626998486566507621788067407801446653817084773593447750536760726328181846148796735281641093010591779831932642219726102078053842871797524259180462260941347187607861143528753408648553226664594566167144004035493598747058262464028921086677063744238054117036026474424200669404040541741089488952450333186352920506992966354233867486847040227511411739650410428484934690894425346298530522431869715501231981300211144292964679233711023126030591090133988165902354715190666968671746666183188500137158378218853216403335436055238620198781335330412497413090531383125003929619623015718918635569148152161493775816765140180383757181549555324756622159986417789936790275550342255130919744077294673324496031598671136550458836408297648862986919505877181344933661036061866778633857773609283628335501953977282925470457826051717580217573278485914618162532212468650508935894429369169284841856773426700536920457919241947861719828211200564147738663559973490681449868966622073849773278441660202394122312871921977719000821975530198967738745420928939407061776019288639278708514814787667220691339580656592648449223676776398907965477924979285895121809407143759534281575448431548983689217661646540116246613156313909317523287060114774737857412102853202214178809166950137228490783824868499424727037174988995477892014951342707294696218807486131289503431732462933097139789790785226917238810581983920404047253119118934897436463616596092443412885343901773764440701234369495020473923889155153601298790896055258085916442494498462191524156056831244802532894350415832054342105308267841988928717502814692556635906072024523806202790920943373197955499631087820775872092477099935889970262483605069767218270326385171402038099406478111301521057879489366810145504023393157396449194043678744646828243693802778337474474413895423034167391892154362511850015098853226271980339083813",
            'tan1': "1.557407724654902230506974807458360173087250772381520038383946605698861397151727289555099965202242983804633821411748166613323554618124558937606071684548904439293586043167147908036824613274706955597341640610775535247302506796850507041352385144917621481627570027886022450772014016185772130673941664322369016675671795096261088233022485213114835059162969258761611173265010045945634821564335385053259780863154982428906189221075884887892422138520905365610443447236286192544657877827351485077390888070037215907030879143251705820913626961953437747894016600745631615788169568161461436186656729228633097709676920371691601726377851286722603752440285158731927907827373385857833413004954321710467619326436490003044570244221748445925216001466870637778559548657399002472178504979563330119946188334439864023802697735949828863610802812017131116315237374209653111681319993776046600356584588428198573672765446789419846002299652151294651408159731386909100279357875497921097424539149526556627755848704769021018003549619740582596030630411930328179256346064034568806584376247159361387977557503626537707113718302799753143243295515324353917534134963007340266486882362521259339056569903894957415630631232121188864972642397622846820858401162109081359809437214889731022008434044657933358018330187400146491553718263907029247457299851112765201984866526439565014881186451537089781962173305156234843425069549140648084360538899957820237283322498822424779033358140612050260593023684442696436297963820737196060480403848202315985249662079530378163819099197063810866365504297009489823614796228403405869054325760982345543433126142945187517372711540440884577346253534259581826033794185248086206316977311461468599430131183394634315912977536101215014157560566420406821592001491559264507892280616970471073746392574018706626115013014679553292668241825550287948175868618294645259080421291891931336236746933249627598211870746439755787922744181437150312302286237355463558140789200771087749140339212098797963177258610428042951849103934959142047380521217581388904873054330965993019381928988172307369094130411247941172019832836021213140824551208755490269989291507589522004208674997125666468192954192634696290838945936910546491016047265195993829573789724131347055607909809331783186839732675792723852213350603920784170700603961920930464028125239977542721518460060179115259556739490761074909163516904407294907733082628827948420295702301203022298140006158286108894865994552998935858943999694288409574184788745523731935964115910095125230432253494229913543620606656366556808776457946206477240930435725591974580174380470670469894500723914171201367745083822356532499233413345516147423630035908818359153313797725762602677789776127512243560881489065175413749267788432879828792264370659482121131151239998015687117102420837837599844586945057966164174894430584801275004159998731017555856165210226069759787780673780031946637762885260514926717658657861090786843534447837103487143869871080040496420923010114349026708877629963974626606657945972638041915426550684236732917907518639128194148200947006747409332945853964848930486160168230847832209261678869912312899086988036720510551952827720378468421149506506012210210923623699914292082561108346670101315960303471359170136937353464067196821327203481938785218178076239296541664491100957469447587359423665443710279581772172378178644590100082547422800288475533376984557789242776035787735823148884954455215763404818190842013159547922328595178714546694080082833061992119129499440905559508334448759082330968594767287119994269392193987182838644041486531912649414077077063550382361439279048256252478690847449053592703610440821282606095728584198295174794059687813102080660486248058236441344375782818980777761145955347284071829842125236733090263422503078826002333398205860592437252103438860108849250825654020260159484670232250958993692750405750864002064708548967573017992363573694976275783244843230226450627626395630133554252317193459628122173555126985752481008192921014345634851843597302850087963266867343334352452959864355199165253154170702745902792837375947210242020196589276712740171146348260656473420370577368948135963011255903491326237000978744039906136184005373389201"
        };

        const MODES = ['pie', 'pi', 'e', 'phi', 'gamma', 'sqrtpi', 'sqrt2', 'cbrt2', 'sqrt3', 'epi', 'ln2', 'sin1', 'cos1', 'tan1'];

        const TITLES = {
            'pie': 'π×e',
            'pi': 'π',
            'e': 'e',
            'phi': 'φ',
            'gamma': 'γ',
            'sqrtpi': '√π',
            'sqrt2': '√2',
            'cbrt2': '∛2',
            'sqrt3': '√3',
            'epi': 'e↑π',
            'ln2': 'ln(2)',
            'sin1': 'sin(1)',
            'cos1': 'cos(1)',
            'tan1': 'tan(1)'
        };

        const SPOKEN_TITLES = {
            'pie': 'The product of pi and e',
            'pi': 'The circumference of a circle divided by its diameter, known as pi',
            'e': 'The natural base of exponential growth, known as e',
            'phi': 'The golden ratio, known as phi',
            'gamma': 'The Euler-Mascheroni constant, known as gamma',
            'sqrtpi': 'The square root of pi',
            'sqrt2': 'The square root of two',
            'cbrt2': 'The cube root of two',
            'sqrt3': 'The square root of three',
            'epi': 'e raised to the power of pi',
            'ln2': 'The natural logarithm of two',
            'sin1': 'The sine of one radian',
            'cos1': 'The cosine of one radian',
            'tan1': 'The tangent of one radian'
        };

        const SHORT_SPOKEN_TITLES = {
            'pie': 'pi times e',
            'pi': 'pi',
            'e': 'e',
            'phi': 'phi',
            'gamma': 'gamma',
            'sqrtpi': 'root pi',
            'sqrt2': 'root two',
            'cbrt2': 'cube root two',
            'sqrt3': 'root three',
            'epi': 'e to pi',
            'ln2': 'log two',
            'sin1': 'sine one',
            'cos1': 'cosine one',
            'tan1': 'tangent one'
        };

        const AFK_EXTRA_DIGITS = 10;

        const sequenceStates = {
            'pie': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'pi': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'e': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'phi': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'gamma': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'sqrtpi': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'sqrt2': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'cbrt2': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'sqrt3': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'epi': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'ln2': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'sin1': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'cos1': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            },
            'tan1': {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3
            }
        };

        let currentMode = 'pie';
        let currentSequence = SEQUENCES[currentMode];
        let currentGoal = 3;

        const numberWords = {
            '0': 'zero',
            '1': 'one',
            '2': 'two',
            '3': 'three',
            '4': 'four',
            '5': 'five',
            '6': 'six',
            '7': 'seven',
            '8': 'eight',
            '9': 'nine',
            '.': 'point',
            ',': 'point'
        };

        const UI_TEXT = {
            tooltips: {
                radioClump: "Click here to make this the default or fallback clumping size.",
                checkboxClump: "Click here to toggle allowance of this clumping size."
            }
        };

        let currentRun = 0;
        let currentCount = 0;
        let isShowPhase = false;
        let isRecallPhase = false;
        let speedIncreaseEarned = false;
        let isAFKMode = false;
        let currentChunkSize = getDefaultChunkSize();
        let afkModeCounter = 0;  // 0: tones, 1: speech, 2: grouped tones, 3: singing

        let correctVoice = null;
        let errorVoice = null;

        let audioContext = null;
        let noteFrequencies = null;

        function getMinimumLength(sequence) {
            return sequence.indexOf('.') + 2;
        }

        function initializeAudio() {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            
            // Frequencies for notes in the circle of fifths starting from C4
            noteFrequencies = {
                '0': 146.83238,  // C3
                '1': 195.99772,  // F3
                '2': 261.62557,  // B♭3
                '3': 349.22823,  // E♭4
                '4': 466.16376,  // A♭4
                '5': 622.25397,  // D♭5
                '6': 830.60940,  // G♭5 (F♯5)
                '7': 1108.73052,  // B5
                '8': 1479.97769,  // E6
                '9': 1975.53321,  // A6
                '.': [110.00000, 2637.02046]  // A2 + D7? chord for decimal point
            };
        }

        function calculateGain(frequency) {
            // Example formula: higher frequencies get lower gain
            // You might need to adjust these numbers to get the right balance
            return 0.10 + 0.20 * (1000 / frequency);  // This will give higher gain to lower frequencies
        }

        function calculateChunkPitch(chunk) {
            // Filter to just digits and convert to numbers
            const digits = chunk.filter(char => /[0-9]/.test(char))
                            .map(Number);
            
            if (digits.length === 0) return 1.0;  // Default pitch for chunks with no digits
            
            // Average the digits
            const avg = digits.reduce((sum, digit) => sum + digit, 0) / digits.length;
            
            // Convert 0-9 range to 0-2 range
            return (avg / 9) * 2;
        }

        function playNote(digit) {
            if (!audioContext) {
                initializeAudio();
            }
            
            const time = audioContext.currentTime;
            const frequencies = Array.isArray(noteFrequencies[digit]) ? 
                            noteFrequencies[digit] : [noteFrequencies[digit]];
            
            frequencies.forEach(freq => {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.type = 'sine';
                oscillator.frequency.value = freq;
                
                const adjustedGain = calculateGain(freq);
                gainNode.gain.setValueAtTime(adjustedGain, time);
                gainNode.gain.exponentialRampToValueAtTime(adjustedGain * 0.033, time + 0.2);  // Still fade out to 1/30th
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.start(time);
                oscillator.stop(time + 0.2);
            });
        }

        function initializeVoices() {
            const voices = speechSynthesis.getVoices();
            correctVoice = voices.find(v => v.name.includes('Google')) || voices[0];
            errorVoice = voices.find(v => v.name !== correctVoice.name) || correctVoice;
        }

        speechSynthesis.onvoiceschanged = initializeVoices;

        function returnFocus() {
            document.getElementById('display').focus();
        }

        function handleFirstDigit(key) {
            const firstChar = currentSequence[0];
            if (key === firstChar || (firstChar === '.' && key === ',')) {
                playNote(firstChar);
                returnFocus();  // Move this earlier!
                speechSynthesis.cancel();
                isAFKMode = false;
                document.getElementById('afkButton').textContent = 'Start AFK Mode';
                document.getElementById('afkButton').classList.remove('active');
                currentCount = 1;  // Count the first digit as already entered
                isShowPhase = false;
                isRecallPhase = true;
                updateDisplay();
                return true;
            }
            return false;
        }

        function speakError() {
            speechSynthesis.cancel();
            const utterance = new SpeechSynthesisUtterance("Oops");
            utterance.voice = errorVoice;
            speechSynthesis.speak(utterance);
        }

        function speakNextCycle() {
            speechSynthesis.cancel();
            const utterance = new SpeechSynthesisUtterance("Next cycle");
            utterance.voice = correctVoice;
            speechSynthesis.speak(utterance);
        }

        function speakConfirmation(text, thenDo) {
            speechSynthesis.cancel();
            const utterance = new SpeechSynthesisUtterance(text);
            if (thenDo) {
                utterance.onend = thenDo;
            }
            speechSynthesis.speak(utterance);
        }

        function getTargetLength() {
            return sequenceStates[currentMode].targetLength;
        }

        function setTargetLength(value) {
            sequenceStates[currentMode].targetLength = value;
        }

        function getSpeedLevel() {
            return sequenceStates[currentMode].speedLevel;
        }

        function setSpeedLevel(value) {
            sequenceStates[currentMode].speedLevel = value;
        }

        function getCycleStartTarget() {
            return sequenceStates[currentMode].cycleStartTarget;
        }

        function setCycleStartTarget(value) {
            sequenceStates[currentMode].cycleStartTarget = value;
        }

        function toggleMode(toggleDirection = 1) {
            speechSynthesis.cancel();
            const currentIndex = MODES.indexOf(currentMode);
            const nextMode = MODES[(currentIndex + toggleDirection + MODES.length) % MODES.length];
            
            currentMode = nextMode;
            currentSequence = SEQUENCES[currentMode];
            document.getElementById('title').textContent = TITLES[currentMode];
            
            // Start a new run but preserve the state
            currentCount = 0;
            isShowPhase = true;
            isRecallPhase = false;
            speedIncreaseEarned = false;
            updateDisplay();
            returnFocus();

            if (isAFKMode) {
                speakAFKCycle();
            } else {
                speakConfirmation(`Switching to ${SPOKEN_TITLES[currentMode]}`, () => speakDigits());
            }
            updateRecipeButtons();
        }

        function getValidDivisors(n) {
            const divisors = [];
            document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
                const size = parseInt(checkbox.id.replace('item', ''));
                if (n % size === 0) {
                    divisors.push(size);
                }
            });
            return divisors;
        }

        function getDefaultChunkSize() {
            const selectedRadio = document.querySelector('input[type="radio"]:checked');
            if (!selectedRadio) {
                console.log('No radio button selected, using 4 as fallback');
                return 4;  // ultimate fallback
            }
            return parseInt(selectedRadio.id.replace('item', ''));
        }

        function determineChunkSize(length) {
            // Check if current length has any valid divisors
            const currentDivisors = getValidDivisors(length);
            if (currentDivisors.length > 0) {
                const chunkSize = currentDivisors[currentDivisors.length - 1];  // Use largest valid divisor
                console.log(`Found valid divisors for ${length}: ${currentDivisors}, using ${chunkSize}`);
                return chunkSize;
            }
            
            // If no valid divisors found for current length, use default
            const defaultSize = getDefaultChunkSize();
            console.log(`No valid divisors for ${length}, using default: ${defaultSize}`);
            return defaultSize;
        }

        function updateChunkSize(length) {
            sequenceStates[currentMode].previousChunkSize = currentChunkSize;  // Store current before changing
            currentChunkSize = determineChunkSize(length);
            document.getElementById('chunkSize').textContent = currentChunkSize;
        }

        function setChunkSize(length) {
            const divisors = getValidDivisors(length);
            if (divisors.length > 0) {
                currentChunkSize = divisors[Math.floor(Math.random() * divisors.length)];
            } else {
                currentChunkSize = getDefaultChunkSize();
            }
            document.getElementById('chunkSize').textContent = currentChunkSize;
        }

        function createSpeechText(digits) {
            if (digits.length <= 2) return digits.map(d => numberWords[d]).join(' ');
            
            let text = '';
            for (let i = 0; i < digits.length; i += currentChunkSize) {
                if (i > 0) text += ', ';
                const group = digits.slice(i, i + currentChunkSize);
                text += group.map(d => numberWords[d]).join(' ');
            }
            
            return text;
        }

        function updateRecipeButtons() {
            const currentIndex = MODES.indexOf(currentMode);
            const numModes = MODES.length;
            const buttons = document.getElementsByClassName('recipe-button');
            
            // Calculate indices with wraparound
            const indices = [
                (currentIndex - 2 + numModes) % numModes,
                (currentIndex - 1 + numModes) % numModes,
                currentIndex,
                (currentIndex + 1) % numModes,
                (currentIndex + 2) % numModes
            ];
            
            // Helper to check if index wrapped
            const didWrap = (index) => {
                if (index < currentIndex - 2) return true;  // Wrapped from end
                if (index > currentIndex + 2) return true;  // Wrapped from beginning
                return false;
            };
            
            // Update each button
            indices.forEach((modeIndex, buttonIndex) => {
                const button = buttons[buttonIndex];
                const mode = MODES[modeIndex];
                button.textContent = TITLES[mode];
                button.onclick = () => {
                    speechSynthesis.cancel();
                    currentMode = mode;
                    currentSequence = SEQUENCES[mode];
                    document.getElementById('title').textContent = TITLES[mode];
                    currentRun--;
                    startRun();
                };
                if (modeIndex === currentIndex) {
                    button.className = 'recipe-button active';
                } else if (didWrap(modeIndex)) {
                    button.style.backgroundColor = '#ffb800';  // Amber for wrapped
                } else {
                    button.style.backgroundColor = '#b8ff00';  // Original green
                }
            });
        }

        function updateDisplay() {
            const display = document.getElementById('display');
            const phase = document.getElementById('phase');
            const congrats = document.getElementById('congrats');
            
            if (isAFKMode) {
                const length = Math.min(getTargetLength() + AFK_EXTRA_DIGITS, currentSequence.length);
                display.textContent = currentSequence.slice(0, length);
                phase.textContent = "AFK Mode - Listening Practice";
            } else if (isShowPhase) {
                const length = Math.min(getTargetLength(), currentSequence.length);
                let displayHtml = '';
                const colors = ['#500000', '#005000', '#000050'];
                const lastLength = sequenceStates[currentMode].lastAchievedLength;
                const wasSuccessful = sequenceStates[currentMode].wasSuccessful;
                const prevChunkSize = sequenceStates[currentMode].previousChunkSize;
                
                // If successful in last attempt, use current chunk size for all chunks
                const chunkSizeForColoring = wasSuccessful ? currentChunkSize : prevChunkSize;
                
                if (length <= chunkSizeForColoring) {
                    // If it's just the first chunk or less, show it all in black
                    displayHtml = `<span style="color: #000000">${currentSequence.slice(0, length)}</span>`;
                } else {
                    // Calculate full chunks based on last achievement
                    const fullChunks = Math.floor(lastLength / chunkSizeForColoring);
                    
                    // Display previously mastered chunks in cycling colors
                    for (let i = 0; i < fullChunks; i++) {
                        const start = i * chunkSizeForColoring;
                        const end = start + chunkSizeForColoring;
                        displayHtml += `<span style="color: ${colors[i % 3]}">${currentSequence.slice(start, end)}</span>`;
                    }
                    
                    // Display partially mastered chunk if any
                    const masteredRemainder = lastLength % chunkSizeForColoring;
                    if (masteredRemainder > 0) {
                        const start = fullChunks * chunkSizeForColoring;
                        displayHtml += `<span style="color: ${colors[fullChunks % 3]}">${currentSequence.slice(start, start + masteredRemainder)}</span>`;
                    }
                    
                    // Display new chunk to learn in black
                    displayHtml += `<span style="color: #000000">${currentSequence.slice(lastLength, length)}</span>`;
                }
                
                display.innerHTML = displayHtml;
                phase.textContent = "Look and Listen";
            } else if (isRecallPhase) {
                let displayHtml = '';
                const colors = ['#500000', '#005000', '#000050'];
                const fullChunks = Math.floor(currentCount / currentChunkSize);
                
                // Display completed chunks in cycling colors
                for (let i = 0; i < fullChunks; i++) {
                    const start = i * currentChunkSize;
                    const end = start + currentChunkSize;
                    displayHtml += `<span style="color: ${colors[i % 3]}">${currentSequence.slice(start, end)}</span>`;
                }
                
                // Display any partially typed chunk
                const remainingStart = fullChunks * currentChunkSize;
                if (currentCount > remainingStart) {
                    displayHtml += `<span style="color: ${colors[fullChunks % 3]}">${currentSequence.slice(remainingStart, currentCount)}</span>`;
                }
                
                display.innerHTML = displayHtml;
                phase.textContent = "Recall Phase - Type from memory";
            } else {
                display.textContent = "";
                phase.textContent = "Ready to start";
            }

            if (currentCount >= currentSequence.length) {
                congrats.textContent = `Congratulations! You've entered ${currentSequence.length} digits! Ready to play again?`;
            } else {
                congrats.textContent = '';
            }

            document.getElementById('runCount').textContent = currentRun;
            document.getElementById('previousBest').textContent = sequenceStates[currentMode].previousBest;
            document.getElementById('currentCount').textContent = currentCount;
            document.getElementById('targetLength').textContent = getTargetLength();
            document.getElementById('speedLevel').textContent = getSpeedLevel();
        }

        function speakDigits(extraDigits = 0, speakMode = 1) {
            const length = Math.min(getTargetLength() + extraDigits, currentSequence.length);
            const lastLength = sequenceStates[currentMode].lastAchievedLength;
            const chunkSize = currentChunkSize;
            
            // Calculate chunks
            const fullMasteredChunks = Math.floor(lastLength / chunkSize);
            const masteredRemainder = lastLength % chunkSize;
            const digits = currentSequence.slice(0, length).split('');
            console.log('length:', length);
            console.log('lastLength:', lastLength);
            console.log('digits:', digits);
            console.log('fullMasteredChunks:', fullMasteredChunks);
            console.log('masteredRemainder:', masteredRemainder);

            if (speakMode === 1 || speakMode === 3) {  // Speech modes
                const introText = `${SHORT_SPOKEN_TITLES[currentMode]} is approximately equal to `;
                let groups = [];
                
                if (!lastLength) {  // This will catch both undefined and 0
                    console.log('Initial case - processing all digits');
                    // Initial case - just speak all digits as one group
                    groups.push(digits.map(d => numberWords[d]).join(' '));
                } else {
                    console.log('Normal chunking case');
                    // Normal chunking logic for subsequent rounds
                    for (let i = 0; i < fullMasteredChunks; i++) {
                        const start = i * chunkSize;
                        const end = start + chunkSize;
                        groups.push(digits.slice(start, end).map(d => numberWords[d]).join(' '));
                    }
                    
                    if (masteredRemainder > 0) {
                        const start = fullMasteredChunks * chunkSize;
                        groups.push(digits.slice(start, start + masteredRemainder).map(d => numberWords[d]).join(' '));
                    }
                    
                    const newStart = lastLength;
                    if (newStart < length) {
                        groups.push(digits.slice(newStart, length).map(d => numberWords[d]).join(' '));
                    }
                }
                const wordsText = groups.join(', ');
                console.log('introText:', introText);
                console.log('groups:', groups);
                console.log('wordsText:', wordsText);
                console.log('full text:', introText + wordsText);
                const utterance = new SpeechSynthesisUtterance(introText + wordsText);
                    utterance.rate = 0.75 + (getSpeedLevel() - 1) * 0.1;
                
                if (!isAFKMode) {
                    utterance.onend = () => {
                        isShowPhase = false;
                        isRecallPhase = true;
                        currentGoal = getTargetLength();
                        console.log(`Entering Recall Phase with goal: ${currentGoal}`);
                        updateDisplay();
                    };
                }

                if (speakMode === 3) {  // Combined mode
                    return new Promise((resolve) => {
                        let delay = 0;
                        const toneInterval = isAFKMode ? 300 : 600;
                        
                        // Process in chunks
                        groups.forEach((groupText, groupIndex) => {
                            const chunk = groupText.split(' ').map(word => 
                                Object.entries(numberWords).find(([digit, name]) => name === word)[0]
                            );
                            const chunkUtterance = new SpeechSynthesisUtterance(groupText);
                            chunkUtterance.pitch = calculateChunkPitch(chunk);
                            
                            setTimeout(() => {
                                // Play tones for this chunk
                                chunk.forEach((digit, idx) => {
                                    setTimeout(() => playNote(digit), idx * toneInterval);
                                });
                                // Speak the chunk
                                speechSynthesis.speak(chunkUtterance);
                            }, delay);
                            
                            delay += chunk.length * toneInterval * 2.2;  // Extra time for both tones and speech
                        });
                        
                        setTimeout(resolve, delay + toneInterval);
                    });
                }

                speechSynthesis.speak(utterance);
                return utterance;
            } else {  // Tone modes (0 or 2)
                return new Promise((resolve) => {
                    let delay = 0;
                    const toneInterval = isAFKMode ? 300 : 600;
                    const chunkPause = toneInterval * 2;
                    const finalDelay = toneInterval;

                    if (speakMode === 2) {  // Grouped tones mode
                        // Play tones in chunks based on currentChunkSize
                        for (let i = 0; i < digits.length; i += chunkSize) {
                            const chunk = digits.slice(i, i + chunkSize);
                            
                            // Play each tone in this chunk
                            chunk.forEach((digit) => {
                                setTimeout(() => {
                                    playNote(digit);
                                }, delay);
                                delay += toneInterval;
                            });

                            // Add extra pause after chunk (unless it's the last chunk)
                            if (i + chunkSize < digits.length) {
                                delay += chunkPause;
                            }
                        }
                    } else {  // Regular ungrouped tones
                        digits.forEach((digit) => {
                            setTimeout(() => {
                                playNote(digit);
                            }, delay);
                            delay += toneInterval;
                        });
                    }

                    // Only resolve after all notes have played plus final delay
                    setTimeout(resolve, delay + finalDelay);
                });
            }
        }

        async function speakAFKCycle() {
            try {
                // Get result from speakDigits (either a Promise for tones or an utterance for speech)
                const result = speakDigits(AFK_EXTRA_DIGITS, afkModeCounter);
                
                if (result instanceof Promise) {
                    // For tones: wait for the Promise to resolve
                    await result;
                } else {
                    // For speech: create and wait for a Promise that resolves when speech ends
                    await new Promise(resolve => {
                        result.onend = resolve;
                    });
                }
                
                // Only start next cycle if still in AFK mode
                if (isAFKMode) {
                    afkModeCounter = (afkModeCounter + 1) % getDefaultChunkSize();
                    setTimeout(speakAFKCycle, 1077);
                }
            } catch (error) {
                console.error('Error in AFK cycle:', error);
            }
        }

        function startAFKMode() {
            speechSynthesis.cancel();
            isAFKMode = true;
            isShowPhase = false;
            isRecallPhase = false;
            afkModeCounter = 0;
            document.getElementById('afkButton').textContent = 'Stop AFK Mode';
            document.getElementById('afkButton').classList.add('active');
            updateRecipeButtons();
            updateDisplay();
            speakConfirmation('Starting listening practice', () => {
                speakAFKCycle();
            });
        }

        function stopAFKMode() {
            speechSynthesis.cancel();
            isAFKMode = false;
            document.getElementById('afkButton').textContent = 'Start AFK Mode';
            document.getElementById('afkButton').classList.remove('active');
            speakConfirmation('Stopping listening practice', () => startRun());
        }

        function toggleAFK() {
            if (isAFKMode) {
                stopAFKMode();
            } else {
                startAFKMode();
            }
        }

        function startRun() {
            currentRun++;
            currentCount = 0;
            isShowPhase = true;
            isRecallPhase = false;
            setCycleStartTarget(getTargetLength());
            speedIncreaseEarned = false;
            updateRecipeButtons();
            updateDisplay();
            returnFocus(); 
            speakDigits();
        }

        function resetProgress() {
            speechSynthesis.cancel();
            sequenceStates[currentMode] = {
                previousBest: 0,
                targetLength: 3,
                speedLevel: 1,
                cycleStartTarget: 3,
                lastAchievedLength: 0,
                previousChunkSize: 4,
                wasSuccessful: false  // Gets set only after typing in Recall Phase
            };
            currentRun = 0;
            currentCount = 0;
            isShowPhase = false;
            isRecallPhase = false;
            speedIncreaseEarned = false;
            isAFKMode = false;
            currentChunkSize = getDefaultChunkSize();
            document.getElementById('afkButton').textContent = 'Start AFK Mode';
            document.getElementById('afkButton').classList.remove('active');
            document.getElementById('chunkSize').textContent = currentChunkSize;
            updateDisplay();
            returnFocus();
            speakConfirmation('Starting new run', () => startRun());
        }

        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                toggleMode(-1);
                return;
            } else if (e.key === 'ArrowRight') {
                toggleMode();
                return;
            }
            
            const isDigitOrDecimal = /^[0-9.,]$/.test(e.key);

            if ((isAFKMode || isShowPhase) && isDigitOrDecimal) {
                // In AFK mode, only accept correct first digit
                handleFirstDigit(e.key);
                return;
            }

            if (!isRecallPhase) return;
            
            const expectedChar = currentSequence[currentCount];
            
            if ((e.key === expectedChar) || (expectedChar === '.' && e.key === ',')) {
                playNote(expectedChar);
                returnFocus();
                currentCount++;
                if (isRecallPhase) {
                    if (currentCount >= currentGoal) {
                        sequenceStates[currentMode].lastAchievedLength = currentCount;
                    }
                    sequenceStates[currentMode].wasSuccessful = (currentCount >= currentGoal);
                }
                if (!isRecallPhase && currentCount >= getTargetLength() - 3) {
                    if (getTargetLength() < currentSequence.length) {
                        setTargetLength(getTargetLength() + 1);
                    }
                    if (!speedIncreaseEarned && currentCount >= getCycleStartTarget()) {
                        setSpeedLevel(getSpeedLevel() + 1);
                        speedIncreaseEarned = true;
                    }
                }
                if (currentCount > sequenceStates[currentMode].previousBest) {
                    sequenceStates[currentMode].previousBest = currentCount;
                    
                    // Check if we should move up in rankings
                    for (let i = 0; i < MODES.length; i++) {
                        currentIndex = MODES.indexOf(currentMode);
                        if (currentIndex > 0) {  // If not already at the top
                            const prevMode = MODES[currentIndex - 1];
                            if (currentCount > sequenceStates[prevMode].previousBest) {
                                // Swap positions in MODES array
                                MODES[currentIndex] = prevMode;
                                MODES[currentIndex - 1] = currentMode;
                                updateRecipeButtons();
                            } else {
                                // If the previous position has a higher previousBest, stop the loop
                                break;
                            }
                        } else {
                            // If already at the top, stop the loop
                            break;
                        }
                    }
                }
                updateDisplay();
                returnFocus();  // Add here after updateDisplay()
            } else if (isDigitOrDecimal) {
                speakError();
                if (currentCount < getCycleStartTarget() - 1) {
                    setTargetLength(Math.max(3, getTargetLength() - 1));
                    setSpeedLevel(Math.max(1, getSpeedLevel() - 1));
                }
                isRecallPhase = false;
                updateDisplay();
                returnFocus();  // Add here after updateDisplay()
                setTimeout(startRun, 1000);
            } else if (e.key === 'Enter' || e.key === ' ') {
                console.log(`Ending Recall Phase - count: ${currentCount}, goal: ${currentGoal}`);
                speakNextCycle();
                isRecallPhase = false;
                
                // Calculate base length from max of minimum, previous target-1, and last achieved
                const baseLength = Math.max(
                    getMinimumLength(currentSequence),
                    getTargetLength() - 1,
                    sequenceStates[currentMode].lastAchievedLength
                );
                
                // Determine new chunk size based on this base length
                const newChunkSize = determineChunkSize(baseLength);
                
                // Set target length - if successful, add a new chunk
                const newTargetLength = sequenceStates[currentMode].wasSuccessful ? 
                    baseLength + newChunkSize : 
                    baseLength;
                
                console.log(`Base length: ${baseLength}, new chunk size: ${newChunkSize}`);
                console.log(`Was successful: ${sequenceStates[currentMode].wasSuccessful}, new target length: ${newTargetLength}`);
                
                updateChunkSize(baseLength);  // Update chunk size for display
                setTargetLength(newTargetLength);
                
                updateDisplay();
                returnFocus();
                setTimeout(startRun, 1000);
            }
        });

        // Set up digit button click handlers
        document.querySelectorAll('.digit-button').forEach(button => {
            button.onclick = () => {
                let keyToSend;
                if (button.classList.contains('enter')) {
                    keyToSend = 'Enter';
                } else {
                    keyToSend = button.textContent;
                }
                const event = new KeyboardEvent('keydown', {
                    key: keyToSend,
                    bubbles: true
                });
                document.dispatchEvent(event);
            };
        });

        document.querySelectorAll('[data-tooltip]').forEach(element => {
            element.title = UI_TEXT.tooltips[element.dataset.tooltip];
        });

        // Start first run automatically
        startRun();

    </script>
</body>
</html>
